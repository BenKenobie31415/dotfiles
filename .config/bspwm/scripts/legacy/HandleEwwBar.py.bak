#!/usr/bin/env python3
import bspc
import os
import time

ignored_window_names: list[str] = ["Eww - bar", "Eww - darkbar"]
ignored_node_ids: list[str]
bar_node_id: str
darkbar_node_id: str

def main():
    global ignored_node_ids
    global bar_node_id
    global darkbar_node_id
    focused_desktop = bspc.get_focused_desktop()
    frame_in_s = 1/60

    #Wait for Eww-bar to be initialized
    while any([not bspc.get_first_window_with_name(name, focused_desktop) for name in ignored_window_names]):
        time.sleep(frame_in_s)
    #caches ids that should be ignored for determining if a desktop is occupied
    ignored_node_ids = [bspc.get_first_window_with_name(name, focused_desktop) for name in ignored_window_names]
    #caches the id of the two bar-windows
    bar_node_id = bspc.get_first_window_with_name("Eww - bar", focused_desktop)
    darkbar_node_id = bspc.get_first_window_with_name("Eww - darkbar", focused_desktop)

    init_eww_bar()
    bspc.subscribe("desktop_focus", handle_desktop_focus)
    bspc.subscribe("node_remove", handle_node_remove)
    bspc.subscribe("node_add", handle_node_add)
    bspc.subscribe("node_transfer", handle_node_transfer)

def handle_desktop_focus(args: list[str]) -> None:
    print(f"newly focused {bspc.get_desktop_name(bspc.get_focused_desktop())} on display {args[0]} occupied: {is_desktop_occupied(bspc.get_focused_desktop())}")
    dst_desktop_id = args[1]
    set_dark_bar_hidden(not is_desktop_occupied(dst_desktop_id))
    update_desktop_visibility()
    update_active_desktop()

def handle_node_remove(args: list[str]) -> None:
    desktop_id = args[1]
    set_dark_bar_hidden(not is_desktop_occupied(desktop_id))
    update_desktop_visibility()

def handle_node_add(args: list[str]) -> None:
    desktop_id = args[1]
    set_dark_bar_hidden(not is_desktop_occupied(desktop_id))
    update_desktop_visibility()

def handle_node_transfer(args: list[str]) -> None:
    src_desktop_id = args[1]
    if bspc.get_focused_desktop() != src_desktop_id:
        return
    set_dark_bar_hidden(not is_desktop_occupied(src_desktop_id))
    update_desktop_visibility()

def set_dark_bar_hidden(hidden: bool) -> None:
    focused_desktop_id = bspc.get_focused_desktop()
    global darkbar_node_id
    if hidden:
        bspc.set_node_flag(darkbar_node_id, "hidden", "true", focused_desktop_id)
    else:
        bspc.set_node_flag(darkbar_node_id, "hidden", "false", focused_desktop_id)

def init_eww_bar() -> None:
    init_eww_desktops()
    update_active_desktop()
    init_eww_locked()
    update_desktop_visibility()
    set_dark_bar_hidden(not is_desktop_occupied(bspc.get_focused_desktop()))

def init_eww_desktops() -> None:
    desktop_names = get_desktop_names()
    desktop_names.sort(key = lambda x: x)
    if (desktop_names[0] == 0):
        desktop_names.remove(0)
        desktop_names.append(0)
    update_eww_var("workspaceNumber", "\"" + str(desktop_names) + "\"")

def init_eww_locked() -> None:
    focused_desktop = bspc.get_focused_desktop()
    bspc.set_node_flag(bar_node_id, "locked", "true", focused_desktop)
    bspc.set_node_flag(darkbar_node_id, "locked", "true", focused_desktop)

def update_desktop_visibility() -> None:
    potential_names = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    desktop_ids = bspc.get_desktop_ids()
    desktop_names = get_desktop_names()
    name_id_dict = {bspc.get_desktop_name(id):id for id in desktop_ids}
    desktop_visibility = [(name in desktop_names and (is_desktop_occupied(name_id_dict[name]) or bspc.get_focused_desktop() == name_id_dict[name])) for name in potential_names]
    update_eww_var("workspaceVisibility", "\"" + str(desktop_visibility).lower() + "\"")

def get_desktop_names() -> list[str]:
    return [bspc.get_desktop_name(id) for id in bspc.get_desktop_ids()]

def is_desktop_occupied(desktop_id: str) -> bool:
    return len(bspc.get_window_ids(desktop_id, excluded=ignored_node_ids)) > 0

def update_active_desktop() -> None:
    update_eww_var("activeworkspace", bspc.get_desktop_name(bspc.get_focused_desktop()))

def update_eww_var(var: str, value: str) -> None:
    os.popen(f"eww update {var}={value}")

if __name__ == "__main__":
    main()
