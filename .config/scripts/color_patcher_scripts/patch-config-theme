#!/usr/bin/env python
import os
from color_template_lib import Color
from themes import themes
import sys

cwd = os.getcwd()

def main() -> None:
    if len(sys.argv) != 3:
        usage()
        sys.exit(1)
    config_path = os.path.abspath(sys.argv[1])
    color_theme_id = sys.argv[2]
    col_path = f'{os.path.dirname(config_path)}/col.{os.path.basename(config_path)}'

    if not os.path.isfile(config_path):
        print(f'{config_path} is not a valid filepath.')
        sys.exit(1)
    if not os.path.isfile(col_path):
        print(f'coloration file "{col_path}" not present.')
        sys.exit(1)
    if color_theme_id not in themes.keys():
        print(f'{color_theme_id} is not a valid theme. Valid themes are:')
        for theme in themes.keys():
            print(theme)
        sys.exit(1)
    colors = themes[color_theme_id]

    with open(col_path, 'r') as file:
        col_file = file.read()
    new_config = col_file
    for current_color in Color:
        new_config = new_config.replace(f'[{current_color.name.lower()}]', colors[current_color])
    with open(config_path, 'w') as file:
        _ = file.write(new_config)
    print(f'successfully patched {config_path} to theme {color_theme_id}')

def usage() -> None:
    print('')

if __name__ == '__main__':
    main()
