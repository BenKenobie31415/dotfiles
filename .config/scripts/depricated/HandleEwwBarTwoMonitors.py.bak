#!/usr/bin/env python3
import bspc
import time
import eww_bar_util

main_monitor = bspc.get_monitor_id("HDMI2")
side_monitor = bspc.get_monitor_id("eDP1")
eww_window_names: list[str] = ["Eww - bar_main", "Eww - bar_side", "Eww - darkbar_main", "Eww - darkbar_side"]
eww_window_ids: list[str]
bar_node_id_main: str
bar_node_id_side: str
darkbar_node_id_main: str
darkbar_node_id_side: str

def main():
    global eww_window_ids
    global bar_node_id_main
    global bar_node_id_side
    global darkbar_node_id_main
    global darkbar_node_id_side

    #Wait for Eww-bar to be initialized
    while not eww_bar_util.are_eww_windows_present(eww_window_names):
        time.sleep(0.5)
    #caches ids that should be ignored for determining if a desktop is occupied
    eww_window_ids = [bspc.get_first_window_with_name(name) for name in eww_window_names]
    #caches the id of the two bar-windows for each monitor
    bar_node_id_main = bspc.get_first_window_with_name("Eww - bar_main")
    bar_node_id_side = bspc.get_first_window_with_name("Eww - bar_side")
    darkbar_node_id_main = bspc.get_first_window_with_name("Eww - darkbar_main")
    darkbar_node_id_side = bspc.get_first_window_with_name("Eww - darkbar_side")
    init_eww_bar()
    bspc.subscribe("desktop_focus", handle_desktop_focus)
    bspc.subscribe("node_remove", handle_node_remove)
    bspc.subscribe("node_add", handle_node_add)
    bspc.subscribe("node_transfer", handle_node_transfer)

def handle_desktop_focus(args: list[str]) -> None:
    eww_bar_util.update_focused_desktop_highlight()
    update_eww_bar()

def handle_node_remove(args: list[str]) -> None:
    update_eww_bar()

def handle_node_add(args: list[str]) -> None:
    update_eww_bar()

def handle_node_transfer(args: list[str]) -> None:
    #ensures that only events get handled where a node gets moved to another desktop
    src_desktop_id = args[1]
    if bspc.get_focused_desktop() != src_desktop_id:
        return
    update_eww_bar()

def set_darkbar_hidden(hidden: bool, main: bool) -> None:
    focused_desktop_id = bspc.get_focused_desktop()
    global darkbar_node_id_main
    global darkbar_node_id_side
    if hidden and main:
        bspc.set_node_flag(darkbar_node_id_main, "hidden", "true", focused_desktop_id)
    elif not hidden and main:
        bspc.set_node_flag(darkbar_node_id_main, "hidden", "false", focused_desktop_id)
    elif hidden and not main:
        bspc.set_node_flag(darkbar_node_id_side, "hidden", "true", focused_desktop_id)
    elif not hidden and not main:
        bspc.set_node_flag(darkbar_node_id_side, "hidden", "false", focused_desktop_id)

def init_eww_bar() -> None:
    init_eww_desktops()
    lock_eww_bar()
    eww_bar_util.update_focused_desktop_highlight()
    update_eww_bar()

def update_eww_bar() -> None:
    for desktop_id in bspc.get_active_desktops():
        set_darkbar_hidden(not is_desktop_occupied(desktop_id), is_main_monitor(bspc.get_monitor_of_desktop(desktop_id)))
    update_desktop_visibility()

def init_eww_desktops() -> None:
    desktop_names = get_desktop_names()
    desktop_names.sort(key = lambda x: x)
    if (desktop_names[0] == 0):
        desktop_names.remove(0)
        desktop_names.append(0)
    eww_bar_util.update_eww_var("workspaceNumber", "\"" + str(desktop_names) + "\"")

def lock_eww_bar() -> None:
    active_desktop_main = bspc.get_active_desktop(main_monitor)
    active_desktop_side = bspc.get_active_desktop(side_monitor)
    bspc.set_node_flag(bar_node_id_main, "locked", "true", active_desktop_main)
    bspc.set_node_flag(bar_node_id_side, "locked", "true", active_desktop_main)
    bspc.set_node_flag(darkbar_node_id_main, "locked", "true", active_desktop_side)
    bspc.set_node_flag(darkbar_node_id_side, "locked", "true", active_desktop_side)

def update_desktop_visibility() -> None:
    possible_names = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    desktop_ids = bspc.get_desktop_ids()
    desktop_names = get_desktop_names()
    name_id_dict = {bspc.get_desktop_name(id):id for id in desktop_ids}
    desktop_visibility = [(name in desktop_names and (is_desktop_occupied(name_id_dict[name]) or name_id_dict[name] in bspc.get_active_desktops())) for name in possible_names]
    eww_bar_util.update_eww_var("workspaceVisibility", "\"" + str(desktop_visibility).lower() + "\"")

def get_desktop_names() -> list[str]:
    return [bspc.get_desktop_name(id) for id in bspc.get_desktop_ids()]

def is_desktop_occupied(desktop_id: str) -> bool:
    return bspc.is_desktop_occupied(desktop_id, excluded_ids=eww_window_ids)

def is_main_monitor(monitor_id: str) -> bool:
    return main_monitor == monitor_id

if __name__ == "__main__":
    main()
