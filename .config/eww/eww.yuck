;;Order defines order in bar
(defvar workspaceNumbers "[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]")
;;Initial visibility (index <-> workspacenumber)
(defvar workspaceVisibility "[false, false, false, false, false, false, false, false, false, false]")
;;Workspace names (index <-> workspacenumber)
(defvar workspaceNames '["十","一","二","三","四","五","六","七","八","九"]')
;;Workspace initially shown to be active
(defvar activeworkspace 1)
;;Initial value to display as current brightness
(defvar brightness 100)
;;Name of currently focused window
(defvar focusedname "desktop")
;;Updates the Time-Variable for the clock in the status-bar
(defpoll time
  :interval "1s"
  "date '+%d-%m-%Y  %H:%M:%S'"
)


;;Top-level widgets composed of lower-level widgets
(defwidget bar []
  (centerbox
    :orientation "h"
    (workspaces)
	(empty)
    (sidestuff)
  )
)

(defwidget darkbar []
  (transform
    :translate-y "-523px"
    (centerbox
      :orientation "v"
	  (empty)
      (windowname)
	  (empty)
    )
  )
)

(defwidget empty []
  (box
    ""
  )
)


;;Lower-level widgets
(defwidget windowname []
  (box
    :class {(focusedname != "desktop") ? "focusedNameVisible" : "focusedNameInvisible"}
    :orientation "h"
    :space-evenly false
    :halign "center"
    {(focusedname != "desktop") ? focusedname : ""}
  )
)

(defwidget sidestuff []
  (box
    :class "sidestuff"
    :orientation "h"
    :space-evenly false
    :halign "end"
    {"${brightness}% "
      + "${(brightness <= 100 && brightness >= 85) ? '' : ''}"
      + "${(brightness < 85 && brightness >= 75) ? '' : ''}"
      + "${(brightness < 75 && brightness >= 65) ? '' : ''}"
      + "${(brightness < 65 && brightness >= 55) ? '' : ''}"
      + "${(brightness < 55 && brightness >= 45) ? '' : ''}"
      + "${(brightness < 45 && brightness >= 35) ? '' : ''}"
      + "${(brightness < 35 && brightness >= 25) ? '' : ''}"
      + "${(brightness < 25 && brightness >= 15) ? '' : ''}"
      + "${(brightness < 15 && brightness >= 0) ? '' : ''}  "
    }
    (box
      :class {"${(EWW_BATTERY.BAT0.capacity >= 40) ? 'batteryHigh' : ''}"
        + "${(EWW_BATTERY.BAT0.capacity < 40 && EWW_BATTERY.BAT0.capacity >= 20) ? 'batteryMedium' : ''}"
        + "${(EWW_BATTERY.BAT0.capacity < 20) ? 'batteryLow' : ''}"
		+ "${(EWW_BATTERY.BAT0.status == 'Charging') ? 'Charging' : ''}"
      }
      {"${EWW_BATTERY.BAT0.capacity}% "
        + "${(EWW_BATTERY.BAT0.status == 'Discharging' && EWW_BATTERY.BAT0.capacity <= 100 && EWW_BATTERY.BAT0.capacity >= 80) ? '' : ''}"
        + "${(EWW_BATTERY.BAT0.status == 'Discharging' && EWW_BATTERY.BAT0.capacity < 80 && EWW_BATTERY.BAT0.capacity >= 60) ? '' : ''}"
        + "${(EWW_BATTERY.BAT0.status == 'Discharging' && EWW_BATTERY.BAT0.capacity < 60 && EWW_BATTERY.BAT0.capacity >= 40) ? '' : ''}"
        + "${(EWW_BATTERY.BAT0.status == 'Discharging' && EWW_BATTERY.BAT0.capacity < 40 && EWW_BATTERY.BAT0.capacity >= 20) ? '' : ''}"
        + "${(EWW_BATTERY.BAT0.status == 'Discharging' && EWW_BATTERY.BAT0.capacity < 20 && EWW_BATTERY.BAT0.capacity >= 0) ? '' : ''}"
        + "${(EWW_BATTERY.BAT0.status == 'Charging') ? '󱐋' : ''}"
		+ "  "
      }
    )
    (button
	  ;;setting timeout to near-infinite value
	  :timeout "10000000ms"
      :onclick "networkmanager_dmenu" '${EWW_NETWORK}'
    )
    time
  )
)

(defwidget workspaces []
  (box
    :class "workspaces"
    :orientation "h"
    :space-evenly false
    :halign "start"
    (for number in workspaceNumbers
      (revealer
        :reveal {workspaceVisibility[number]}
        :transition "slideright"
        :duration "0ms"
        (button
          :class {activeworkspace == number ? "active" : "inactive"}
          :onclick "bspc desktop -f ${number}" {workspaceNames[number]}
        )
      )
    )
  )
)


;;Windows (the things that are ultimatly displayed on the display)
;;Statusbar for Main-Monitor (External if connected)
(defwindow bar_main
  :monitor 0
  :windowtype "dialog"
  :geometry
  (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "35px"
    :anchor "top center"
  )
  :reserve
  (struts
    :side "top"
    :distance "35px"
  )
  (bar)
)
;;Statusbar for Side_monitor (Internal if External connected)
(defwindow bar_side
  :monitor 1
  :windowtype "dialog"
  :geometry
  (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "35px"
    :anchor "top center"
  )
  :reserve
  (struts
    :side "top"
    :distance "35px"
  )
  (bar)
)


;;Transparent (Bar) on the Main-Screen making the screen darker (should run if an application is open)
(defwindow darkbar_main
  :monitor 0
  :windowtype "dialog"
  :stacking "bg"
  :geometry
  (geometry
    :x "0%"
	:y "0%"
	:width "100%"
	:height "100%"
	:anchor "top center"
  )
  (darkbar)
)
;;Transparent (Bar) on the Side-Screen making the screen darker (should run if an application is open)
(defwindow darkbar_side
  :monitor 1
  :windowtype "dialog"
  :stacking "bg"
  :geometry
  (geometry
    :x "0%"
	:y "0%"
	:width "100%"
	:height "100%"
	:anchor "top center"
  )
  (darkbar)
)

